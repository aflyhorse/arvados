---
layout: default
navsection: installguide
title: Install a compute node
...

h2. Install dependencies

First, "add the appropriate package repository for your distribution":{{ site.baseurl }}/install/install-manual-prerequisites.html#repos.

On Debian-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo apt-get install perl python-virtualenv fuse python-arvados-python-client python-arvados-fuse crunchstat arvados-docker-cleaner iptables ca-certificates</span>
</code></pre>
</notextile>

On Red Hat-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo yum install perl python27-python-virtualenv fuse python27-python-arvados-python-client python27-python-arvados-fuse crunchstat arvados-docker-cleaner iptables ca-certificates</span>
</code></pre>
</notextile>

{% include 'note_python27_sc' %}

h2. Install Docker

Compute nodes must have Docker installed to run jobs inside containers.  This requires a relatively recent version of Linux (at least upstream version 3.10, or a distribution version with the appropriate patches backported).  Follow the "Docker Engine installation documentation":https://docs.docker.com/ for your distribution.

For Debian-based systems, the Arvados package repository includes a backported @docker.io@ package with a known-good version you can install.

h2. Configure Docker

Crunch runs jobs in Docker containers with relatively little configuration.  You may need to start the Docker daemon with specific options to make sure these jobs run smoothly in your environment.  This section highlights options that are useful to most installations.  Refer to the "Docker daemon reference":https://docs.docker.com/reference/commandline/daemon/ for complete information about all available options.

The best way to configure these options varies by distribution.

* If you're using our backported @docker.io@ package, you can list these options in the @DOCKER_OPTS@ setting in @/etc/default/docker.io@.
* If you're using another Debian-based package, you can list these options in the @DOCKER_OPTS@ setting in @/etc/default/docker@.
* On Red Hat-based distributions, you can list these options in the @other_args@ setting in @/etc/sysconfig/docker@.

h3. Default ulimits

Docker containers inherit ulimits from the Docker daemon.  However, the ulimits for a single Unix daemon may not accommodate a long-running Crunch job.  You may want to increase default limits for compute jobs by passing @--default-ulimit@ options to the Docker daemon.  For example, to allow jobs to open 10,000 files, set @--default-ulimit nofile=10000:10000@.

h3. DNS

Your containers must be able to resolve the hostname in the ARVADOS_API_HOST environment variable (provided by the Crunch dispatcher) and any hostnames returned in Keep service records.  If these names are not in public DNS records, you may need to set a DNS resolver for the containers by specifying the @--dns@ address with the IP address of an appropriate nameserver.  You may specify this option more than once to use multiple nameservers.

h2. Set up SLURM

Install SLURM following "the same process you used to install the Crunch dispatcher":install-crunch-dispatch.html#slurm.

h2. Copy configuration files from the dispatcher (API server)

The @/etc/slurm-llnl/slurm.conf@ and @/etc/munge/munge.key@ files need to be identicaly across the dispatcher and all compute nodes. Copy the files you created in the "Install the Crunch dispatcher":install-crunch-dispatch.html step to this compute node.

h2. Configure FUSE

Install this file as @/etc/fuse.conf@:

<notextile>
<pre>
# Set the maximum number of FUSE mounts allowed to non-root users.
# The default is 1000.
#
#mount_max = 1000

# Allow non-root users to specify the 'allow_other' or 'allow_root'
# mount options.
#
user_allow_other
</pre>
</notextile>

h2. Configure the Docker cleaner

The arvados-docker-cleaner program removes least recently used docker images as needed to keep disk usage below a configured limit.

{% include 'notebox_begin' %}
This also removes all containers as soon as they exit, as if they were run with `docker run --rm`. If you need to debug or inspect containers after they stop, temporarily stop arvados-docker-cleaner or run it with `--remove-stopped-containers never`.
{% include 'notebox_end' %}

On Debian-based systems, install runit:

<notextile>
<pre><code>~$ <span class="userinput">sudo apt-get install runit</span>
</code></pre>
</notextile>

On Red Hat-based systems, "install runit from source":http://smarden.org/runit/install.html or use an alternative daemon supervisor.

Configure runit to run the image cleaner using a suitable quota for your compute nodes and workload:

<notextile>
<pre><code>~$ <span class="userinput">cd /etc/sv</span>
/etc/sv$ <span class="userinput">sudo mkdir arvados-docker-cleaner; cd arvados-docker-cleaner</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo mkdir log log/main</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo sh -c 'cat &gt;log/run' &lt;&lt;'EOF'
#!/bin/sh
exec svlogd -tt main
EOF</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo sh -c 'cat &gt;run' &lt;&lt;'EOF'
#!/bin/sh
exec python3 -m arvados_docker.cleaner --quota <b>50G</b>
EOF</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo chmod +x run log/run</span>
</code></pre>
</notextile>

If you are using a different daemon supervisor, or if you want to test the daemon in a terminal window, an equivalent shell command to run arvados-docker-cleaner is:

<notextile>
<pre><code><span class="userinput">python3 -m arvados_docker.cleaner --quota <b>50G</b></span>
</code></pre>
</notextile>

h2. Add a Crunch user account

Create a Crunch user account, and add it to the @fuse@ and @docker@ groups so it can use those tools:

<notextile>
<pre><code>~$ <span class="userinput">sudo useradd --groups fuse,docker crunch</span>
</code></pre>
</notextile>

The crunch user should have the same UID, GID, and home directory across all compute nodes and the dispatcher (API server).

h2. Tell the API server about this compute node

Load your API superuser token on the compute node:

<notextile>
<pre><code>
~$ <span class="userinput">HISTIGNORE=$HISTIGNORE:'export ARVADOS_API_TOKEN=*'</span>
~$ <span class="userinput">export ARVADOS_API_TOKEN=@your-superuser-token@</span>
~$ <span class="userinput">export ARVADOS_API_HOST=@uuid_prefix.your.domain@</span>
~$ <span class="userinput">unset ARVADOS_API_HOST_INSECURE</span>
</code>
</pre>
</notextile>

Then execute this script to create a compute node object, and set up a cron job to have the compute node ping the API server every five minutes:

<notextile>
<pre><code>
#!/bin/bash
set -e
if ! test -f /root/node.json ; then
    python - &lt;&lt;EOF
import arvados, json, socket
fqdn = socket.getfqdn()
hostname, _, domain = fqdn.partition('.')
ip_address = socket.gethostbyname(fqdn)
node = arvados.api('v1').nodes().create(body={'hostname': hostname, 'domain': domain, 'ip_address': ip_address}).execute()
with open('/root/node.json', 'w') as node_file:
    json.dump(node, node_file, indent=2)
EOF

    # Make sure /dev/fuse permissions are correct (the device appears after fuse is loaded)
    chmod 1660 /dev/fuse
    if grep -q "^fuse:" /etc/group ; then
        chgrp fuse /dev/fuse
    fi
fi

UUID=`grep \"uuid\" /root/node.json  |cut -f4 -d\"`
PING_SECRET=`grep \"ping_secret\" /root/node.json  |cut -f4 -d\"`

if ! test -f /etc/cron.d/node_ping ; then
    echo "*/5 * * * * root /usr/bin/curl -k -d ping_secret=$PING_SECRET https://$ARVADOS_API_HOST/arvados/v1/nodes/$UUID/ping" > /etc/cron.d/node_ping
fi

/usr/bin/curl -k -d ping_secret=$PING_SECRET https://$ARVADOS_API_HOST/arvados/v1/nodes/$UUID/ping?ping_secret=$PING_SECRET
</code>
</pre>
</notextile>

And remove your token from the environment:

<notextile>
<pre><code>
~$ <span class="userinput">unset ARVADOS_API_TOKEN</span>
~$ <span class="userinput">unset ARVADOS_API_HOST</span>
</code>
</pre>
</notextile>

